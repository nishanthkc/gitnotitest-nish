name: Monitor Public Repository for New Commits

on:
  schedule:
    - cron: '*/1 * * * *'  # Runs every 10 minutes
  workflow_dispatch:  # Allows manual execution

jobs:
  check_commits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout self
        uses: actions/checkout@v3
        
      - name: Check if Latest Commit Exists
        run: |
          if curl --fail -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts | jq -e '.artifacts | map(select(.name=="latest_commit")) | length > 0'; then
            echo "Artifact found. Proceeding to download."
            echo "HAS_ARTIFACT=true" >> $GITHUB_ENV
          else
            echo "No previous artifact found. Skipping download."
            echo "HAS_ARTIFACT=false" >> $GITHUB_ENV
          fi


      - name: Restore Latest Commit
        uses: actions/download-artifact@v4  # Updated to v4
        with:
          name: latest_commit
          path: .


      - name: Fetch Latest Commit from Public Repo
        id: fetch_commit
        run: |
          TARGET_REPO="nchurchm/gitnotitest"  # Replace with the actual public repo owner/name
          BRANCH="main"  # Change if needed
          API_URL="https://api.github.com/repos/$TARGET_REPO/commits?sha=$BRANCH"
          
          LATEST_COMMIT=$(curl -s $API_URL | jq -r '.[0].sha')

          echo "Latest commit: $LATEST_COMMIT"
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV

      - name: Check for New Commit
        id: check_new_commit
        run: |
          TRACKING_FILE="latest_commit.txt"

          # Fetch previous commit if exists
          if [ -f "$TRACKING_FILE" ]; then
            PREV_COMMIT=$(cat $TRACKING_FILE)
          else
            PREV_COMMIT=""
          fi

          echo "Previous commit: $PREV_COMMIT"
          echo "Current commit: $LATEST_COMMIT"

          if [[ "$LATEST_COMMIT" != "$PREV_COMMIT" ]]; then
            echo "NEW_COMMIT=true" >> $GITHUB_ENV
            echo "$LATEST_COMMIT" > $TRACKING_FILE
          else
            echo "NEW_COMMIT=false" >> $GITHUB_ENV
          fi

      # - name: Send Email Notification (if new commit)
      #   if: env.NEW_COMMIT == 'true'
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: ${{ secrets.SMTP_SERVER }}
      #     server_port: ${{ secrets.SMTP_PORT }}
      #     username: ${{ secrets.EMAIL_USERNAME }}
      #     password: ${{ secrets.EMAIL_PASSWORD }}
      #     subject: "New Commit in Public Repository"
      #     body: |
      #       A new commit has been pushed to the public repository.
            
      #       Repository: owner/repository
      #       Commit SHA: ${{ env.LATEST_COMMIT }}
      #       View Commit: https://github.com/owner/repository/commit/${{ env.LATEST_COMMIT }}
      #     to: ${{ secrets.RECIPIENT_EMAIL }}
      #     from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
      - name: Debug SMTP Connection
        run: |
          echo "Testing DNS resolution for SMTP server"
          nslookup ${{ secrets.SMTP_SERVER }}
          echo "Testing connection to SMTP server"
          nc -zv ${{ secrets.SMTP_SERVER }} ${{ secrets.SMTP_PORT }} || echo "Port unreachable"

      - name: Send Email
        if: env.NEW_COMMIT == 'true'
        uses: hilarion5/send-mail@v1
        with:
          smtp-server: "smtp.gmail.com"
          smtp-port: 465
          smtp-secure: true
          from-email: ${{ secrets.FROM_USERNAME }}
          to-email: ${{ secrets.RECIPIENT_EMAIL }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "New Commit Detected in ${{ secrets.TARGET_REPO }}"
          body: |
            A new commit has been pushed to ${{ secrets.TARGET_REPO }}.
            
            Repository: https://github.com/nchurchm/gitnotitest
            Commit SHA: "none"
            View Commit: https://github.com/nchurchm/gitnotitest/commit/none

          html: |
            <h1>This is a test email</h1>
            <p>Test Paragraph</p>

      
      - name: Sync Fork with Upstream
        uses: tgymnich/fork-sync@v1.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Use GitHubâ€™s built-in token
          auto_approve: true
          merge_method: merge
          ignore_fail: true
      - name: Save Latest Commit to Artifacts
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: latest_commit
          path: latest_commit.txt


